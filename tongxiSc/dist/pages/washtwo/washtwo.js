"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var apis = require("../../utils/api.js");
var dates = require("../../utils/dateutils.js");
var nename = require("../../utils/util.js");
var hss = require("../../utils/convert.js");
exports.default = Page({
  paging: function paging() {
    var _this = this;
    var estate = wx.getStorageSync("uid");
    this.setData({ condition: 1 });
    apis.washList({ estateId: estate, offset: _this.data.offset, limit: _this.data.limit, siteId: _this.data.siteId, machineId: _this.data.machineId, type: _this.data.typsy }, 1, successFa, null, null);
    function successFa(data, sourceObj) {
      // console.log(data,333333)
      var offsets = _this.data.offset + _this.data.limit;
      var datas;
      for (var i = 0; i < data.data.length; i++) {
        data.data[i].custNname = nename.filderName(data.data[i].custNname);
        datas = new Date(data.data[i].createTime);
        data.data[i].createTime = dates.getDate(data.data[i].createTime);
        data.data[i].logType = nename.washType(data.data[i].logType);
        _this.data.washnumber.push(data.data[i]);
      }
      var lengths = data.data.length;
      if (lengths < _this.data.limit) {
        _this.setData({ condition: 0 });
      } else {
        _this.setData({ condition: 2 });
      }
      _this.setData({ washnumber: _this.data.washnumber, offset: offsets });
    }
  },
  onLoad: function onLoad(option) {
    //  console.log(option.type,66666)
    this.setData({ typsy: option.type });
    if (option.siteId != null && option.siteId != undefined) {
      this.setData({ siteId: option.siteId });
    }
    if (option.machineId != null && option.machineId != undefined) {
      this.setData({ machineId: option.machineId });
    }
    this.paging();
  },
  onShow: function onShow() {},

  data: {
    washnumber: [],
    offset: 0,
    limit: 10,
    condition: 0,
    siteId: "",
    machineId: "",
    typsy: ''
  },
  onReachBottom: function onReachBottom() {
    this.paging();
  },
  onPullDownRefresh: function onPullDownRefresh() {
    this.setData({ washnumber: [], offset: 0 });
    this.paging();
    wx.stopPullDownRefresh();
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndhc2h0d28ud3hwIl0sIm5hbWVzIjpbImFwaXMiLCJyZXF1aXJlIiwiZGF0ZXMiLCJuZW5hbWUiLCJoc3MiLCJwYWdpbmciLCJfdGhpcyIsImVzdGF0ZSIsInd4IiwiZ2V0U3RvcmFnZVN5bmMiLCJzZXREYXRhIiwiY29uZGl0aW9uIiwid2FzaExpc3QiLCJlc3RhdGVJZCIsIm9mZnNldCIsImRhdGEiLCJsaW1pdCIsInNpdGVJZCIsIm1hY2hpbmVJZCIsInR5cGUiLCJ0eXBzeSIsInN1Y2Nlc3NGYSIsInNvdXJjZU9iaiIsIm9mZnNldHMiLCJkYXRhcyIsImkiLCJsZW5ndGgiLCJjdXN0Tm5hbWUiLCJmaWxkZXJOYW1lIiwiRGF0ZSIsImNyZWF0ZVRpbWUiLCJnZXREYXRlIiwibG9nVHlwZSIsIndhc2hUeXBlIiwid2FzaG51bWJlciIsInB1c2giLCJsZW5ndGhzIiwib25Mb2FkIiwib3B0aW9uIiwidW5kZWZpbmVkIiwib25TaG93Iiwib25SZWFjaEJvdHRvbSIsIm9uUHVsbERvd25SZWZyZXNoIiwic3RvcFB1bGxEb3duUmVmcmVzaCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFJQSxPQUFRQyxRQUFRLG9CQUFSLENBQVo7QUFDQSxJQUFJQyxRQUFTRCxRQUFRLDBCQUFSLENBQWI7QUFDQSxJQUFJRSxTQUFVRixRQUFRLHFCQUFSLENBQWQ7QUFDQSxJQUFJRyxNQUFPSCxRQUFRLHdCQUFSLENBQVg7O0FBU0dJLFVBQU8sa0JBQVU7QUFDZCxRQUFNQyxRQUFRLElBQWQ7QUFDQSxRQUFJQyxTQUFTQyxHQUFHQyxjQUFILENBQWtCLEtBQWxCLENBQWI7QUFDQSxTQUFLQyxPQUFMLENBQWEsRUFBQ0MsV0FBVSxDQUFYLEVBQWI7QUFDRlgsU0FBS1ksUUFBTCxDQUFjLEVBQUNDLFVBQVNOLE1BQVYsRUFBaUJPLFFBQU9SLE1BQU1TLElBQU4sQ0FBV0QsTUFBbkMsRUFBMENFLE9BQU1WLE1BQU1TLElBQU4sQ0FBV0MsS0FBM0QsRUFBaUVDLFFBQU9YLE1B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TDtBQUNBRyxPQUFHbUMsbUJBQUg7QUFDQSIsImZpbGUiOiJ3YXNodHdvLnd4cCIsInNvdXJjZXNDb250ZW50IjpbInZhciBhcGlzID0gIHJlcXVpcmUoXCIuLi8uLi91dGlscy9hcGkuanNcIilcbnZhciBkYXRlcyA9ICByZXF1aXJlKFwiLi4vLi4vdXRpbHMvZGF0ZXV0aWxzLmpzXCIpXG52YXIgbmVuYW1lID0gIHJlcXVpcmUoXCIuLi8uLi91dGlscy91dGlsLmpzXCIpXG52YXIgaHNzID0gIHJlcXVpcmUoXCIuLi8uLi91dGlscy9jb252ZXJ0LmpzXCIpXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbmZpZzoge1xuICAgIG5hdmlnYXRpb25CYXJUaXRsZVRleHQ6ICfmtJfovaYnLFxuICAgIHVzaW5nQ29tcG9uZW50czoge1xuICAgICAgICd3eGMtbGlzdCc6ICdAbWludWkvd3hjLWxpc3QnLFxuICAgICAgICd3eGMtbG9hZG1vcmUnOiAnQG1pbnVpL3d4Yy1sb2FkbW9yZSdcbiAgICB9XG4gIH0sXG4gICBwYWdpbmc6ZnVuY3Rpb24oKXtcbiAgICAgIGNvbnN0IF90aGlzID0gdGhpcztcbiAgICAgIHZhciBlc3RhdGUgPSB3eC5nZXRTdG9yYWdlU3luYyhcInVpZFwiKVxuICAgICAgdGhpcy5zZXREYXRhKHtjb25kaXRpb246MX0pXG4gICAgYXBpcy53YXNoTGlzdCh7ZXN0YXRlSWQ6ZXN0YXRlLG9mZnNldDpfdGhpcy5kYXRhLm9mZnNldCxsaW1pdDpfdGhpcy5kYXRhLmxpbWl0LHNpdGVJZDpfdGhpcy5kYXRhLnNpdGVJZCxtYWNoaW5lSWQ6X3RoaXMuZGF0YS5tYWNoaW5lSWQsdHlwZTpfdGhpcy5kYXRhLnR5cHN5fSwxLHN1Y2Nlc3NGYSwgbnVsbCwgbnVsbCk7XG4gICAgZnVuY3Rpb24gc3VjY2Vzc0ZhKGRhdGEsIHNvdXJjZU9iail7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coZGF0YSwzMzMzMzMpXG4gICAgICAgICAgY29uc3Qgb2Zmc2V0cyA9IF90aGlzLmRhdGEub2Zmc2V0K190aGlzLmRhdGEubGltaXQ7XG4gICAgICAgICAgdmFyIGRhdGFzO1xuICAgICAgICAgICBmb3IodmFyIGk9MDtpPGRhdGEuZGF0YS5sZW5ndGg7aSsrKXtcbiAgICAgICAgICAgICAgZGF0YS5kYXRhW2ldLmN1c3RObmFtZT1uZW5hbWUuZmlsZGVyTmFtZShkYXRhLmRhdGFbaV0uY3VzdE5uYW1lKVxuICAgICAgICAgICAgICBkYXRhcyA9IG5ldyBEYXRlKGRhdGEuZGF0YVtpXS5jcmVhdGVUaW1lKTtcbiAgICAgICAgICAgICAgZGF0YS5kYXRhW2ldLmNyZWF0ZVRpbWU9ZGF0ZXMuZ2V0RGF0ZShkYXRhLmRhdGFbaV0uY3JlYXRlVGltZSk7XG4gICAgICAgICAgICAgIGRhdGEuZGF0YVtpXS5sb2dUeXBlPW5lbmFtZS53YXNoVHlwZShkYXRhLmRhdGFbaV0ubG9nVHlwZSk7XG4gICAgICAgICAgICAgX3RoaXMuZGF0YS53YXNobnVtYmVyLnB1c2goZGF0YS5kYXRhW2ldKVxuICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbGVuZ3RocyA9IGRhdGEuZGF0YS5sZW5ndGg7XG4gICAgICAgICAgIGlmKGxlbmd0aHMgPCBfdGhpcy5kYXRhLmxpbWl0KXtcbiAgICAgICAgICAgIF90aGlzLnNldERhdGEoe2NvbmRpdGlvbjowfSlcbiAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIF90aGlzLnNldERhdGEoe2NvbmRpdGlvbjoyfSlcbiAgICAgICAgICB9XG4gICAgICAgICAgX3RoaXMuc2V0RGF0YSh7d2FzaG51bWJlcjpfdGhpcy5kYXRhLndhc2hudW1iZXIsb2Zmc2V0Om9mZnNldHN9KVxuICAgICAgICAgfVxuICAgfSxcbiAgIG9uTG9hZDpmdW5jdGlvbihvcHRpb24pe1xuICAgIC8vICBjb25zb2xlLmxvZyhvcHRpb24udHlwZSw2NjY2NilcbiAgICAgdGhpcy5zZXREYXRhKHt0eXBzeTpvcHRpb24udHlwZX0pXG4gICAgIGlmKG9wdGlvbi5zaXRlSWQhPW51bGwmJm9wdGlvbi5zaXRlSWQhPXVuZGVmaW5lZCl7XG4gICAgICAgdGhpcy5zZXREYXRhKHtzaXRlSWQ6b3B0aW9uLnNpdGVJZH0pXG4gICAgIH1cbiAgICAgaWYob3B0aW9uLm1hY2hpbmVJZCE9bnVsbCYmb3B0aW9uLm1hY2hpbmVJZCE9dW5kZWZpbmVkKXtcbiAgICAgICB0aGlzLnNldERhdGEoe21hY2hpbmVJZDpvcHRpb24ubWFjaGluZUlkfSlcbiAgICAgfVxuICAgIHRoaXMucGFnaW5nKClcbiAgICB9LFxuICAgIG9uU2hvdygpe1xuICAgIH0sXG4gIGRhdGE6IHtcbiAgICAgd2FzaG51bWJlcjpbXSxcbiAgICAgb2Zmc2V0OjAsXG4gICAgIGxpbWl0OjEwLFxuICAgICBjb25kaXRpb246MCxcbiAgICAgc2l0ZUlkOlwiXCIsXG4gICAgIG1hY2hpbmVJZDpcIlwiLFxuICAgICB0eXBzeTonJ1xuICAgfSxcbiAgb25SZWFjaEJvdHRvbTogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5wYWdpbmcoKVxuICB9LFxuICAgb25QdWxsRG93blJlZnJlc2g6ZnVuY3Rpb24oKXtcbiAgICAgdGhpcy5zZXREYXRhKHt3YXNobnVtYmVyOltdLG9mZnNldDowfSlcbiAgICAgdGhpcy5wYWdpbmcoKVxuICAgICB3eC5zdG9wUHVsbERvd25SZWZyZXNoKClcbiAgICB9LFxufSJdfQ==