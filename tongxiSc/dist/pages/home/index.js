"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var apis = require("../../utils/api2.js");
var dates = require("../../utils/dateutils.js");
exports.default = Page({
  data: {
    "__code__": {
      readme: ""
    },

    washnumber: [],
    offset: 0,
    limit: 10,
    topList: '',
    num: 1,
    bshs: '',
    imgUrl: ''
  },
  paging: function paging(amge) {
    var _this = this;
    apis.prolist(_this.data.bshs, 1, '', '', _this.data.limit, _this.data.offset, 0, successFa);
    // apis.prolist({offset:_this.data.offset,limit:_this.data.limit,tagCode:_this.data.bshs},1,successFa, null, null);
    function successFa(data, sourceObj) {
      console.log(data, 8888);
      var offsets = _this.data.offset + _this.data.limit;
      for (var i = 0; i < data.data.length; i++) {
        _this.data.washnumber.push(data.data[i]);
      }
      _this.setData({ washnumber: _this.data.washnumber, offset: offsets });
    }
  },
  onLoad: function onLoad(option) {
    var app = getApp();
    var theys = this;
    var imgUrl = app.globalData.imgUrl;
    console.log('imgUrl', imgUrl, app.globalData.imgUrl);
    apis.taglist(1, 1, 0, successFa);
    function successFa(data, sourceObj) {
      console.log(data, 4444);
      var datass = data.data;
      var listss = [];
      var datasss = { common: "全部", colors: "#E94A69", texColor: "#fff", I_b: 0, tagCode: "" };
      listss.push(datasss);
      for (var i = 0; i < datass.length; i++) {
        // console.log(datass[i],2222)
        datass[i].colors = "";
        datass[i].texColor = "#E94A69";
        datass[i].I_b = datass[i].uid;
        datass[i].common = datass[i].tagValue;
        listss.push(datass[i]);
      }
      theys.setData({ topList: listss, imgUrl: imgUrl });
    }
  },
  onShow: function onShow() {
    var listss = this.data.topList;
    this.onPullDownRefresh();
  },
  onPullDownRefresh: function onPullDownRefresh() {
    this.setData({ washnumber: [], offset: 0 });
    this.paging();
    wx.stopPullDownRefresh();
  },
  onReachBottom: function onReachBottom() {
    this.paging();
  },
  bigImg: function bigImg(e) {
    var src = e.currentTarget.dataset.src;
    var srcs = e.currentTarget.dataset.srcs;
    var urls = srcs.fileList;
    var imgArr = [];
    for (var i = 0; i < urls.length; i++) {
      imgArr[i] = urls[i].fileUrl;
    }
    wx.previewImage({
      current: src, // 褰撳墠鏄剧ず鍥剧墖鐨刪ttp閾炬帴
      urls: imgArr // 闇€瑕侀瑙堢殑鍥剧墖http閾炬帴鍒楄〃
    });
  },
  topClick: function topClick(e) {
    var listss = this.data.topList;
    var I_bs = e.currentTarget.dataset.i_bs;
    var bshs = e.currentTarget.dataset.bsh;
    this.setData({ bshs: bshs });
    for (var i = 0; i < listss.length; i++) {
      if (listss[i].I_b == I_bs) {
        listss[i].colors = "#E94A69";
        listss[i].texColor = "#fff";
      } else {
        listss[i].colors = "#FFF";
        listss[i].texColor = "#E94A69";
      }
    }
    this.onPullDownRefresh();
    this.setData({ topList: listss });
  },
  newty: function newty(e) {
    var mewtimes = dates.getDate(e.currentTarget.dataset.zcoty.createTime);
    if (e.currentTarget.dataset.zcoty.infoType == 4) {
      wx.navigateTo({
        url: "../outPage/outpage?inur=" + e.currentTarget.dataset.zcoty.webUrl + "&timew=" + mewtimes
      });
    } else {
      wx.navigateTo({
        url: "../newsDetail/newsDetail?teeny=" + e.currentTarget.dataset.zcoty
      });
    }
  },
  costy: function costy() {
    wx.navigateTo({
      url: "../release/release"
    });
  },
  temble: function temble(e) {
    wx.makePhoneCall({
      phoneNumber: e.currentTarget.dataset.number
    });
  },
  onShareAppMessage: function onShareAppMessage() {
    return {
      title: '洗车用同洗',
      path: '/pages/home/index'
    };
  }

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,